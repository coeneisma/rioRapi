% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/relations_utils.R
\name{rio_create_relation}
\alias{rio_create_relation}
\title{Create a new relation for the RIO structure}
\usage{
rio_create_relation(
  from,
  to,
  by,
  type = "one-to-many",
  confidence = "high",
  description = NULL
)
}
\arguments{
\item{from}{Name of the source dataset.}

\item{to}{Name of the target dataset.}

\item{by}{A character vector of joining fields. If these fields have the same name in both datasets,
provide them as a character vector. If they have different names, provide a named vector
where names correspond to fields in the 'from' dataset and values to fields in the 'to' dataset.}

\item{type}{Type of relation (one-to-one, one-to-many, many-to-one, many-to-many). Default is "one-to-many".}

\item{confidence}{Confidence of the relation (high, medium). Default is "high".}

\item{description}{Optional description of the relation.}
}
\value{
A relation object.
}
\description{
This function creates a new relation definition between two datasets.
}
\examples{
# Same field names in both datasets
relation1 <- rio_create_relation(
  from = "dataset1",
  to = "dataset2",
  by = "COMMON_ID"
)

# Different field names
relation2 <- rio_create_relation(
  from = "dataset1",
  to = "dataset2",
  by = c("ID_FROM" = "ID_TO")
)

# Multiple fields
relation3 <- rio_create_relation(
  from = "dataset1",
  to = "dataset2",
  by = c("FIELD1", "FIELD2")  # Same names in both datasets
)

# Multiple fields with different names
relation4 <- rio_create_relation(
  from = "dataset1",
  to = "dataset2",
  by = c("ID1" = "ID_A", "ID2" = "ID_B")
)

}
\keyword{internal}
